{"version":3,"sources":["../src/gkr.js"],"names":["process","argv","length","console","error","basename","exit","searchTerms","urlRegex","RegExp","maxPagesToSearch","parseInt","_debugHtmlArray","useDebugHtmlArray","outputFile","open","file","readFile","toString","close","getRanking","res","printResultAndExit","printErrAndExit","main","install","Result","RegexFound","NotFound","ReachedMaxPages","Error","log","ranking","url","nrResSearched","nextPage","err","genErrMsg","rethrow","exitState","StatusCodeError","RequestError"],"mappings":"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","file":"gkr.js","sourcesContent":["\n\n//  Copyright 2017 Jonathan Ganc\n//\n//  This file is part of googlekeywordranking.\n//\n//  googlekeywordranking is free software: you can redistribute it and/or\n//  modify it under the terms of the GNU General Public License as\n//  published by the Free Software Foundation, either version 3 of the\n//  License, or (at your option) any later version.\n//\n//  Foobar is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.\n\n\n// command line version of googlekeywordranking\n\nimport fs from 'mz/fs';\nimport requestErrors from 'request-promise-native/errors';\nimport path from 'path';\nimport SourceMapSupport from 'source-map-support';\n\nimport googlekeywordranking from './googlekeywordranking.js';\n\nSourceMapSupport.install();\n\nconst Result = googlekeywordranking.Result;\nconst RegexFound = googlekeywordranking.RegexFound;\nconst NotFound = googlekeywordranking.NotFound;\nconst ReachedMaxPages = googlekeywordranking.ReachedMaxPages;\n\n//  print res and exit\n//\n//  exit code in parenthesis, output is printed on different lines\n//  if result found (0):\n//    prints: ranking; URL of page where found\n//  if result not found and no more search results (100):\n//    prints: number of results search\n//  if result not found before maximum number of pages to search (101):\n//    prints: number of results search; URL of next search page\nfunction printResultAndExit(res) {\n  if (!(res instanceof Result)) {\n    throw new Error(`res should be an instance of Result: ${res}`);\n  } else if (res instanceof RegexFound) {\n    console.log(res.ranking);\n    console.log(res.url);\n    process.exit(0);\n  } else if (res instanceof NotFound) {\n    process.exit(100);\n  } else if (res instanceof ReachedMaxPages) {\n    console.log(res.nrResSearched);\n    console.log(res.nextPage);\n    process.exit(101);\n  }\n}\n\n//  print an error message for err and exit\n//\n//  exit code in parenthesis, output is printed on different lines\n//  RequestError (1)\n//  StatusCodeError (2)\n//  if result not found and no more search results (100):\n//    prints: number of results search\n//  if result not found before maximum number of pages to search (101):\n//    prints: number of results search; URL of next search page\nfunction printErrAndExit(err) {\n  console.error(googlekeywordranking.genErrMsg(err));\n\n  // rethrow the error?\n  let rethrow = true;\n  // exit status code\n  let exitState=-1;\n  \n  if (err instanceof requestErrors.StatusCodeError) {\n    rethrow = false;\n    exitState = 1;\n  } else if (err instanceof requestErrors.RequestError) {\n    rethrow = false;\n    exitState = 2;\n  }\n\n  if (rethrow) throw (err);\n  process.exit(exitState);\n}\n\nasync function main() {\n\n  if (!(process.argv.length >= 4 && process.argv.length <= 5) ) {\n    console.error(\n      `Usage: ${path.basename(process.argv[1])}`\n        + ' searchTerms urlRegex [maxPagesToSearch]'\n        + '\\nwhere searchTerms are the terms to search for and'\n        + '\\nurlRegex is the URL as a regular expression');\n    process.exit(1);\n  }\n\n  const searchTerms = process.argv[2];\n  const urlRegex = new RegExp(process.argv[3], 'i');\n  let maxPagesToSearch = 4;\n  if (process.argv.length === 5) {\n    maxPagesToSearch = parseInt(process.argv[4]);\n  }\n  \n  let _debugHtmlArray = null;\n  let useDebugHtmlArray = false;\n  if (useDebugHtmlArray) {\n    const outputFile = './daniel ganc - Google Search.html';\n    const file = await fs.open(outputFile, 'r');\n    _debugHtmlArray = [(await fs.readFile(file)).toString()];\n    await fs.close(file);\n  }\n\n  try {\n    const res = await googlekeywordranking.getRanking({\n      searchTerms, urlRegex, maxPagesToSearch, _debugHtmlArray});\n    printResultAndExit(res);\n  } catch (e) {\n    printErrAndExit(e);\n  }\n}\n\nmain();\n"]}